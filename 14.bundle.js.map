{"version":3,"sources":["webpack:///./src/todos/counters.ts"],"names":["newCounters","Todos","fractal","MODE","Mode","Service","active","completed","Todo","Done"],"mappings":"2lFAMO,SAASA,EAAYC,GACxB,OAAOC,YAAO,e,EAAA,G,EAAA,yBAAe,+GACzB,2BAAOC,YAAKC,IAAKC,UAAjB,WADyB,OAOF,OAHfC,EAAS,EACTC,EAAY,EALK,OAOF,oBAAON,GAAP,WAPE,4FAQC,OADXO,EAPU,QAQC,oBAAOA,GAAP,YARD,QASf,OATe,OAQTC,EARS,EAQTA,KACN,oBAAOA,GAAP,YATe,kCASAF,IATA,wBAScD,IATd,gJAYrB,OAZqB,UAYf,CAAEC,YAAWD,UAZE,sF,mDAAf,sD","file":"14.bundle.js","sourcesContent":["import { Fractal, fractal } from '@fract/core'\nimport { Todo, TodoService } from './todo'\nimport { MODE, Mode } from './factors'\n\nexport type CountersData = { active: number; completed: number }\n\nexport function newCounters(Todos: Fractal<Todo[]>) {\n    return fractal<CountersData>(async function* _Counters() {\n        yield* MODE(Mode.Service)\n\n        while (true) {\n            let active = 0\n            let completed = 0\n\n            for (const Todo of yield* Todos) {\n                const { Done } = (yield* Todo) as TodoService\n                ;(yield* Done) ? completed++ : active++\n            }\n\n            yield { completed, active } as CountersData\n        }\n    })\n}\n"],"sourceRoot":""}