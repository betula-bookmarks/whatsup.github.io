{"version":3,"sources":["webpack:///./src/todos/todo.tsx"],"names":["newTodo","remove","id","name","done","Name","fraction","Done","Edit","fractal","MODE","is","Mode","Service","Data","CheckboxBlankIcon","default","CheckboxMarkedIcon","RemoveIcon","editNameRef","input","document","addEventListener","outsideClickHandler","e","contains","target","use","removeEventListener","handleEditInputChange","value","handleEditInputKeyDown","key","edit","Container","Status","onClick","EditName","ref","type","defaultValue","onChange","onKeyDown","autoFocus","TodoName","onDoubleClick","Remove","styled","li","span","props","button"],"mappings":"ojGAUO,SAASA,EAAT,EAA+CC,GAAmC,IAA/DC,EAA+D,EAA/DA,GAAIC,EAA2D,EAA3DA,KAAMC,EAAqD,EAArDA,KAC1BC,EAAOC,YAASH,GAChBI,EAAOD,YAASF,GAChBI,EAAOF,aAAS,GAEtB,OAAOG,YAAO,e,EAAA,G,EAAA,yBAAmC,mHACzC,2BAAOC,IAAKC,GAAGC,IAAKC,UAApB,WADyC,uCAGrC,OAHqC,SAG/B,CAAEX,KAAIK,QAHyB,6BAOzC,2BAAOG,IAAKC,GAAGC,IAAKE,OAApB,WAPyC,wCASxB,2BAAOT,GAAP,YATwB,QAUxB,OADPF,EAT+B,KAUxB,oBAAOI,GAAP,YAVwB,QAWrC,OADMH,EAV+B,eAW/B,CAAEF,KAAIE,OAAMD,QAXmB,kDAeZ,gCAfY,eAevCY,EAfuC,OAe0BC,QAf1B,YAgBX,gCAhBW,eAgBvCC,EAhBuC,OAgB4BD,QAhB5B,YAiBnB,gCAjBmB,QAiBvCE,EAjBuC,OAiBWF,QAElDG,EAAc,SAACC,GACbA,GAOAC,SAASC,iBAAiB,SANE,SAAtBC,EAAuBC,GACpBJ,EAAMK,SAASD,EAAEE,UAClBlB,EAAKmB,KAAI,GACTN,SAASO,oBAAoB,QAASL,QAMhDM,EAAwB,SAACL,GAC3BnB,EAAKsB,IAAIH,EAAEE,OAAOI,QAEhBC,EAAyB,SAACP,GACd,UAAVA,EAAEQ,KAAiBxB,EAAKmB,KAAI,IAlCS,kIAsC5B,2BAAOtB,GAAP,WAtC4B,OAuC5B,OADPF,EAtCmC,KAuC5B,oBAAOI,GAAP,WAvC4B,OAwC5B,OADPH,EAvCmC,KAwC5B,oBAAOI,GAAP,WAxC4B,OA0CzC,OAFMyB,EAxCmC,cA2CrC,kBAACC,EAAD,CAAWF,IAAK9B,GACZ,kBAACiC,EAAD,CAAQ/B,KAAMA,EAAMgC,QAAS,kBAAM7B,EAAKoB,KAAKvB,KACxCA,EAAO,kBAACa,EAAD,MAAyB,kBAACF,EAAD,OAEpCkB,EACG,kBAACI,EAAD,CACIC,IAAKnB,EACLoB,KAAK,OACLC,aAAcrC,EACdsC,SAAUZ,EACVa,UAAWX,EACXY,WAAS,IAGb,kBAACC,EAAD,CAAUxC,KAAMA,EAAMyC,cAAe,kBAAMrC,EAAKmB,KAAI,KAC/CxB,GAGT,kBAAC2C,EAAD,CAAQV,QAAS,kBAAMnC,EAAOC,KAC1B,kBAACgB,EAAD,QA9D6B,yJ,mDAAnC,sD,uSAsElB,IAAMgB,EAAYa,IAAOC,GAAV,KAOL,kBAAMF,KAMVF,EAAWG,IAAOE,KAAV,KAMD,SAACC,GAAD,OAAYA,EAAM9C,KAAO,UAAY,aAI5C+B,EAASY,IAAOI,OAAV,KAUA,SAACD,GAAD,OAAYA,EAAM9C,KAAO,UAAY,aAG3C0C,EAASC,IAAOI,OAAV,KAmBNd,EAAWU,IAAO3B,MAAV","file":"17.bundle.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { fractal, fraction, Fractal } from '@fract/core'\nimport { MODE, Mode } from './factors'\n\nexport type Todo = Fractal<TodoService | TodoData | TodoJsx>\nexport type TodoService = { id: string; Done: Fractal<boolean> }\nexport type TodoData = { id: string; name: string; done: boolean }\nexport type TodoJsx = JSX.Element\n\nexport function newTodo({ id, name, done }: TodoData, remove: (id: string) => any): Todo {\n    const Name = fraction(name)\n    const Done = fraction(done)\n    const Edit = fraction(false)\n\n    return fractal<TodoJsx | TodoData | TodoService>(async function* _Todo() {\n        if (yield* MODE.is(Mode.Service)) {\n            while (true) {\n                yield { id, Done } as TodoService\n            }\n        }\n\n        if (yield* MODE.is(Mode.Data)) {\n            while (true) {\n                const name = yield* Name\n                const done = yield* Done\n                yield { id, done, name } as TodoData\n            }\n        }\n\n        const CheckboxBlankIcon = (await import('./icons/checkbox-blank.svg')).default\n        const CheckboxMarkedIcon = (await import('./icons/checkbox-marked.svg')).default\n        const RemoveIcon = (await import('./icons/remove.svg')).default\n\n        const editNameRef = (input: HTMLInputElement) => {\n            if (input) {\n                const outsideClickHandler = (e: any) => {\n                    if (!input.contains(e.target)) {\n                        Edit.use(false)\n                        document.removeEventListener('click', outsideClickHandler)\n                    }\n                }\n                document.addEventListener('click', outsideClickHandler)\n            }\n        }\n        const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n            Name.use(e.target.value)\n        }\n        const handleEditInputKeyDown = (e: React.KeyboardEvent) => {\n            if (e.key === 'Enter') Edit.use(false)\n        }\n\n        while (true) {\n            const name = yield* Name\n            const done = yield* Done\n            const edit = yield* Edit\n\n            yield (\n                <Container key={id}>\n                    <Status done={done} onClick={() => Done.use(!done)}>\n                        {done ? <CheckboxMarkedIcon /> : <CheckboxBlankIcon />}\n                    </Status>\n                    {edit ? (\n                        <EditName\n                            ref={editNameRef}\n                            type=\"text\"\n                            defaultValue={name}\n                            onChange={handleEditInputChange}\n                            onKeyDown={handleEditInputKeyDown}\n                            autoFocus\n                        />\n                    ) : (\n                        <TodoName done={done} onDoubleClick={() => Edit.use(true)}>\n                            {name}\n                        </TodoName>\n                    )}\n                    <Remove onClick={() => remove(id)}>\n                        <RemoveIcon />\n                    </Remove>\n                </Container>\n            )\n        }\n    })\n}\n\nconst Container = styled.li`\n    height: 70px;\n    display: flex;\n    :not(:last-child) {\n        border-bottom: 1px solid #f5f5f5;\n    }\n    :hover {\n        ${() => Remove} {\n            opacity: 1;\n        }\n    }\n`\n\nconst TodoName = styled.span<{ done: boolean }>`\n    flex: 1;\n    display: flex;\n    align-items: center;\n    font-size: 24px;\n    user-select: none;\n    color: ${(props) => (props.done ? '#d0d0d0' : 'inherit')};\n    transition: color 0.3s ease;\n`\n\nconst Status = styled.button<{ done: boolean }>`\n    border: none;\n    background: none;\n    outline: none;\n    padding: 0;\n    width: 70px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    fill: ${(props) => (props.done ? '#4fc3f7' : '#e0e0e0')};\n    transition: fill 0.3s ease;\n`\nconst Remove = styled.button`\n    border: none;\n    background: none;\n    outline: none;\n    padding: 0;\n    width: 70px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    fill: #e0e0e0;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n\n    :hover {\n        fill: #4fc3f7;\n    }\n`\n\nconst EditName = styled.input`\n    flex: 1;\n    font-size: 24px;\n    padding: 0;\n    margin: 0;\n    border: none;\n    outline: none;\n    font-family: inherit;\n    font-weight: inherit;\n    color: #000;\n`\n"],"sourceRoot":""}