{"version":3,"sources":["webpack:///./src/todos/todo.tsx"],"names":["TodoMode","TODO_MODE","factor","REMOVE_TODO","newTodo","id","name","done","guts","Name","fraction","Done","Edit","fractal","Service","workInServiceMode","MODE","Mode","Data","Jsx","workInDataMode","workInJsxMode","CheckboxBlankIcon","default","CheckboxMarkedIcon","RemoveIcon","remove","editNameRef","input","document","addEventListener","outsideClickHandler","e","contains","target","use","removeEventListener","handleEditInputChange","value","handleEditInputKeyDown","key","edit","Container","Status","onClick","EditName","ref","type","defaultValue","onChange","onKeyDown","autoFocus","TodoName","onDoubleClick","Remove","styled","li","span","props","button"],"mappings":"2VAiBYA,E,+sGAAAA,O,sBAAAA,M,KAIL,IAAMC,EAAYC,cACZC,EAAcD,cAEpB,SAASE,EAAT,GAAqD,IAAlCC,EAAkC,EAAlCA,GAAIC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,KAI1BC,EAAO,CAAEH,KAAII,KAHNC,YAASJ,GAGGK,KAFZD,YAASH,GAESK,KADlBF,aAAS,IAGtB,OAAOG,YAAO,4CAAC,6FACH,2BAAOZ,GAAP,WADG,+BAEFD,EAASc,QAFP,iBAGH,2BAAOC,EAAkBP,IAAzB,WAHG,0CAMK,2BAAOQ,KAAP,WANL,+BAOMC,IAAKC,KAPX,UAUMD,IAAKE,IAVX,oBAQK,2BAAOC,EAAeZ,IAAtB,YARL,4CAWK,2BAAOa,EAAcb,IAArB,YAXL,gFAAD,sD,SAkBFO,E,mFAAhB,sGAAoCV,EAApC,EAAoCA,GAAIM,EAAxC,EAAwCA,KAAxC,OAEQ,OAFR,SAEc,CAAEN,KAAIM,QAFpB,kE,+BAMgBS,E,mFAAhB,4GAAiCf,EAAjC,EAAiCA,GAAII,EAArC,EAAqCA,KAAME,EAA3C,EAA2CA,KAA3C,OAEqB,2BAAOF,GAAP,WAFrB,OAGqB,OADPH,EAFd,KAGqB,oBAAOK,GAAP,WAHrB,OAIQ,OADMJ,EAHd,cAIc,CAAEF,KAAIE,OAAMD,QAJ1B,mE,+BAQgBe,E,mFAAhB,iIAAgChB,EAAhC,EAAgCA,GAAII,EAApC,EAAoCA,KAAME,EAA1C,EAA0CA,KAAMC,EAAhD,EAAgDA,KAAhD,WACqC,gCADrC,cACUU,EADV,OAC2EC,QAD3E,WAEsC,gCAFtC,cAEUC,EAFV,OAE6ED,QAF7E,WAG8B,gCAH9B,OAKmB,OAFTE,EAHV,OAG4DF,QAEzC,oBAAOpB,GAAP,YALnB,QAKUuB,EALV,KAMUC,EAAc,SAACC,GACjB,GAAIA,EAAO,CAOPC,SAASC,iBAAiB,SANE,SAAtBC,EAAuBC,GACpBJ,EAAMK,SAASD,EAAEE,UAClBtB,EAAKuB,KAAI,GACTN,SAASO,oBAAoB,QAASL,SAMhDM,EAAwB,SAACL,GAC3BvB,EAAK0B,IAAIH,EAAEE,OAAOI,QAEhBC,EAAyB,SAACP,GACd,UAAVA,EAAEQ,KAAiB5B,EAAKuB,KAAI,IArBxC,kIAyBqB,2BAAO1B,GAAP,WAzBrB,OA0BqB,OADPH,EAzBd,KA0BqB,oBAAOK,GAAP,WA1BrB,OA2BqB,OADPJ,EA1Bd,KA2BqB,oBAAOK,GAAP,WA3BrB,OA6BQ,OAFM6B,EA3Bd,cA8BY,kBAACC,EAAD,CAAWF,IAAKnC,GACZ,kBAACsC,EAAD,CAAQpC,KAAMA,EAAMqC,QAAS,kBAAMjC,EAAKwB,KAAK5B,KACxCA,EAAO,kBAACiB,EAAD,MAAyB,kBAACF,EAAD,OAEpCmB,EACG,kBAACI,EAAD,CACIC,IAAKnB,EACLoB,KAAK,OACLC,aAAc1C,EACd2C,SAAUZ,EACVa,UAAWX,EACXY,WAAS,IAGb,kBAACC,EAAD,CAAU7C,KAAMA,EAAM8C,cAAe,kBAAMzC,EAAKuB,KAAI,KAC/C7B,GAGT,kBAACgD,EAAD,CAAQV,QAAS,kBAAMlB,EAAOrB,KAC1B,kBAACoB,EAAD,QAjDpB,2J,sBAwDA,IAAMiB,EAAYa,IAAOC,GAAV,KAOL,kBAAMF,KAMVF,EAAWG,IAAOE,KAAV,KAMD,SAACC,GAAD,OAAYA,EAAMnD,KAAO,UAAY,aAI5CoC,EAASY,IAAOI,OAAV,KAUA,SAACD,GAAD,OAAYA,EAAMnD,KAAO,UAAY,aAG3C+C,EAASC,IAAOI,OAAV,KAmBNd,EAAWU,IAAO3B,MAAV","file":"chunk.751117b8be6b905c7ae1.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { fractal, fraction, Fractal, factor, Fraction } from '@fract/core'\nimport { MODE, Mode } from './factors'\n\ntype Guts = {\n    id: string\n    Name: Fraction<string>\n    Done: Fraction<boolean>\n    Edit: Fraction<boolean>\n}\n\nexport type Todo = Fractal<TodoService | TodoData | TodoJsx>\nexport type TodoService = { id: string; Done: Fractal<boolean> }\nexport type TodoData = { id: string; name: string; done: boolean }\nexport type TodoJsx = JSX.Element\n\nexport enum TodoMode {\n    Service,\n}\n\nexport const TODO_MODE = factor<TodoMode>()\nexport const REMOVE_TODO = factor<(id: string) => void>()\n\nexport function newTodo({ id, name, done }: TodoData): Todo {\n    const Name = fraction(name)\n    const Done = fraction(done)\n    const Edit = fraction(false)\n    const guts = { id, Name, Done, Edit } as Guts\n\n    return fractal(async function* _Todo() {\n        switch (yield* TODO_MODE) {\n            case TodoMode.Service:\n                yield* workInServiceMode(guts)\n                break\n            default:\n                switch (yield* MODE) {\n                    case Mode.Data:\n                        yield* workInDataMode(guts)\n                        break\n                    case Mode.Jsx:\n                        yield* workInJsxMode(guts)\n                        break\n                }\n        }\n    })\n}\n\nasync function* workInServiceMode({ id, Done }: Guts) {\n    while (true) {\n        yield { id, Done } as TodoService\n    }\n}\n\nasync function* workInDataMode({ id, Name, Done }: Guts) {\n    while (true) {\n        const name = yield* Name\n        const done = yield* Done\n        yield { id, done, name } as TodoData\n    }\n}\n\nasync function* workInJsxMode({ id, Name, Done, Edit }: Guts) {\n    const CheckboxBlankIcon = (await import('./icons/checkbox-blank.svg')).default\n    const CheckboxMarkedIcon = (await import('./icons/checkbox-marked.svg')).default\n    const RemoveIcon = (await import('./icons/remove.svg')).default\n\n    const remove = yield* REMOVE_TODO\n    const editNameRef = (input: HTMLInputElement) => {\n        if (input) {\n            const outsideClickHandler = (e: any) => {\n                if (!input.contains(e.target)) {\n                    Edit.use(false)\n                    document.removeEventListener('click', outsideClickHandler)\n                }\n            }\n            document.addEventListener('click', outsideClickHandler)\n        }\n    }\n    const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        Name.use(e.target.value)\n    }\n    const handleEditInputKeyDown = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter') Edit.use(false)\n    }\n\n    while (true) {\n        const name = yield* Name\n        const done = yield* Done\n        const edit = yield* Edit\n\n        yield (\n            <Container key={id}>\n                <Status done={done} onClick={() => Done.use(!done)}>\n                    {done ? <CheckboxMarkedIcon /> : <CheckboxBlankIcon />}\n                </Status>\n                {edit ? (\n                    <EditName\n                        ref={editNameRef}\n                        type=\"text\"\n                        defaultValue={name}\n                        onChange={handleEditInputChange}\n                        onKeyDown={handleEditInputKeyDown}\n                        autoFocus\n                    />\n                ) : (\n                    <TodoName done={done} onDoubleClick={() => Edit.use(true)}>\n                        {name}\n                    </TodoName>\n                )}\n                <Remove onClick={() => remove(id)}>\n                    <RemoveIcon />\n                </Remove>\n            </Container>\n        )\n    }\n}\n\nconst Container = styled.li`\n    height: 70px;\n    display: flex;\n    :not(:last-child) {\n        border-bottom: 1px solid #f5f5f5;\n    }\n    :hover {\n        ${() => Remove} {\n            opacity: 1;\n        }\n    }\n`\n\nconst TodoName = styled.span<{ done: boolean }>`\n    flex: 1;\n    display: flex;\n    align-items: center;\n    font-size: 24px;\n    user-select: none;\n    color: ${(props) => (props.done ? '#d0d0d0' : 'inherit')};\n    transition: color 0.3s ease;\n`\n\nconst Status = styled.button<{ done: boolean }>`\n    border: none;\n    background: none;\n    outline: none;\n    padding: 0;\n    width: 70px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    fill: ${(props) => (props.done ? '#4fc3f7' : '#e0e0e0')};\n    transition: fill 0.3s ease;\n`\nconst Remove = styled.button`\n    border: none;\n    background: none;\n    outline: none;\n    padding: 0;\n    width: 70px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    fill: #e0e0e0;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n\n    :hover {\n        fill: #4fc3f7;\n    }\n`\n\nconst EditName = styled.input`\n    flex: 1;\n    font-size: 24px;\n    padding: 0;\n    margin: 0;\n    border: none;\n    outline: none;\n    font-family: inherit;\n    font-weight: inherit;\n    color: #000;\n`\n"],"sourceRoot":""}