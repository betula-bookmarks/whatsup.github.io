{"version":3,"sources":["webpack:///./src/todos/footer.tsx"],"names":["newFooter","Counters","removeCompleted","fractal","AllFilter","newFilter","FilterMode","All","ActiveFilter","Active","CompletedFilter","Completed","active","completed","a","Container","Flex","Left","visible","Filters","Clear","onClick","Help","name","mode","FILTER","filter","CHANGE_FILTER","change","FilterBtn","styled","footer","div","span","props","ul","li","css"],"mappings":"sgHAOO,SAASA,EAAUC,EAAkCC,GACxD,OAAOC,YAAO,4CAAC,6GACLC,EAAYC,EAAU,MAAOC,IAAWC,KACxCC,EAAeH,EAAU,SAAUC,IAAWG,QAC9CC,EAAkBL,EAAU,YAAaC,IAAWK,WAH/C,OAMuB,2BAAOV,GAAP,WANvB,OAaU,OAbV,OAMCW,EAND,EAMCA,OAAQC,EANT,EAMSA,UANT,OAAAC,EAAA,KASFC,EATE,OAAAD,EAAA,KAUEE,EAVF,KAWK,kBAACC,EAAD,CAAMC,UAAWN,GAASA,EAA1B,eAXL,OAAAE,EAAA,KAYMK,EACI,oBAAOf,GAAP,YAbV,QAcU,OAdV,UAcU,oBAAOI,GAAP,aAdV,QAeU,OAfV,YAeU,oBAAOE,GAAP,aAfV,QAQP,OARO,iFAiBK,kBAACU,EAAD,CAAOC,QAASnB,EAAiBgB,UAAWL,GAA5C,mBAjBL,qEAqBC,kBAACS,EAAD,oCArBD,UAQP,oDARO,mEAAD,sDA4BlB,SAASjB,EAAUkB,EAAcC,GAC7B,OAAOrB,YAAO,4CAAC,mOAEe,OAFf,cAEe,oBAAOsB,KAAP,WAFf,OAEQ,OAFR,qCAEQ,4CAFR,OAGQ,OADTC,EAFC,KAGQ,oBAAOC,KAAP,WAHR,OAKP,OAFMC,EAHC,eAMH,kBAACC,EAAD,CAAWR,QAAS,kBAAMO,EAAOJ,IAAOZ,OAAQc,IAAWF,GACtDD,GAPF,sJAAD,sD,uSAclB,IAAMR,EAAYe,IAAOC,OAAV,KAITf,EAAOc,IAAOC,OAAV,KAWJT,EAAOQ,IAAOE,IAAV,KAQJf,EAAOa,IAAOG,KAAV,KAGQ,SAACC,GAAD,OAAYA,EAAMhB,QAAU,UAAY,YAGpDE,EAAQU,IAAOhB,EAAV,KAIO,SAACoB,GAAD,OAAYA,EAAMhB,QAAU,UAAY,YASpDC,EAAUW,IAAOK,GAAV,KAaPN,EAAYC,IAAOM,GAAV,KAaT,SAACF,GAAD,OACEA,EAAMtB,OACAyB,YADN,KAIMA,YAJN","file":"chunk.04cf36de0cb90bcd8d43.js","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { Fractal, fractal } from '@fract/core'\nimport { FilterMode } from './const'\nimport { FILTER, CHANGE_FILTER } from './factors'\nimport { TodosCounters } from './todos'\n\nexport function newFooter(Counters: Fractal<TodosCounters>, removeCompleted: () => any) {\n    return fractal(async function* _Footer() {\n        const AllFilter = newFilter('All', FilterMode.All)\n        const ActiveFilter = newFilter('Active', FilterMode.Active)\n        const CompletedFilter = newFilter('Completed', FilterMode.Completed)\n\n        while (true) {\n            const { active, completed } = yield* Counters\n\n            yield (\n                <Container>\n                    <Flex>\n                        <Left visible={!!active}>{active} items left</Left>\n                        <Filters>\n                            {yield* AllFilter}\n                            {yield* ActiveFilter}\n                            {yield* CompletedFilter}\n                        </Filters>\n                        <Clear onClick={removeCompleted} visible={!!completed}>\n                            Clear completed\n                        </Clear>\n                    </Flex>\n                    <Help>Double click to edit a todo</Help>\n                </Container>\n            )\n        }\n    })\n}\n\nfunction newFilter(name: string, mode: FilterMode) {\n    return fractal(async function* _Filter() {\n        while (true) {\n            const filter = yield* yield* FILTER\n            const change = yield* CHANGE_FILTER\n\n            yield (\n                <FilterBtn onClick={() => change(mode)} active={filter === mode}>\n                    {name}\n                </FilterBtn>\n            )\n        }\n    })\n}\n\nconst Container = styled.footer`\n    user-select: none;\n`\n\nconst Flex = styled.footer`\n    min-height: 50px;\n    padding: 10px;\n    display: flex;\n    align-items: center;\n\n    @media (max-width: 500px) {\n        flex-wrap: wrap;\n    }\n`\n\nconst Help = styled.div`\n    font-size: 12px;\n    font-weight: 300;\n    color: #e0e0e0;\n    text-align: center;\n    padding: 5px 0;\n`\n\nconst Left = styled.span<{ visible: boolean }>`\n    flex: 1 0 100px;\n    margin-top: 2px;\n    visibility: ${(props) => (props.visible ? 'visible' : 'hidden')};\n`\n\nconst Clear = styled.a<{ visible: boolean }>`\n    flex: 1 0 100px;\n    text-align: right;\n    margin-top: 2px;\n    visibility: ${(props) => (props.visible ? 'visible' : 'hidden')};\n    transition: color 0.1s ease;\n\n    :hover {\n        color: #0288d1;\n        cursor: pointer;\n    }\n`\n\nconst Filters = styled.ul`\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    @media (max-width: 500px) {\n        order: 1;\n        flex: 0 0 100%;\n        margin-top: 10px;\n    }\n`\n\nconst FilterBtn = styled.li<{ active: boolean }>`\n    cursor: pointer;\n    font-size: 16px;\n    padding: 2px 7px;\n    border-radius: 3px;\n    border-width: 1px;\n    border-style: solid;\n    transition: border-color 0.3s ease;\n\n    :not(:last-child) {\n        margin-right: 20px;\n    }\n\n    ${(props) =>\n        props.active\n            ? css`\n                  border-color: #29b6f6;\n              `\n            : css`\n                  border-color: transparent;\n                  :hover {\n                      border-color: #4fc3f7;\n                  }\n              `}\n`\n"],"sourceRoot":""}